


DFA


#1st
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0', 'q1', 'q2', 'q3'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': 'q1', '1': 'q0'},
        'q1': {'0': 'q2', '1': 'q0'},
        'q2': {'0': 'q2', '1': 'q3'},
        'q3': {'0': 'q3', '1': 'q3'}
    },
    initial_state='q0',
    final_states={'q3'}
)
for i in range(1,4):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")


OUTPUT:
Language that accepts all and only those strings that contain 001 :
Enter the string :001
Accepted
Enter the string :00001
Accepted










#2nd
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0', 'q1', 'q2'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': 'q0', '1': 'q1'},
        'q1': {'0': 'q1', '1': 'q2'},
        'q2': {'0': 'q2', '1': 'q1'}
    },
    initial_state='q0',
    final_states={'q2'}
)
for i in range(1,4):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:
Automata code for L(M) ={ w | w has an even number of 1s} :
Enter the string :1111
Accepted
Enter the string :11
Accepted






#3rd
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': 'q0', '1': 'q0'}
    },
    initial_state='q0',
    final_states={'q0'}
)
for i in range(1,8):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:
DFA which accepts only 0’s and 1’s combinations as inputs :
Enter the string :1010
Accepted
Enter the string :110
Accepted










#4th
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0', 'q1', 'q2', 'q3', 'q4', 'q5'},
    input_symbols={'a', 'b'},
    transitions={
        'q0': {'a': 'q1', 'b': 'q5'},
        'q1': {'a': 'q2', 'b': 'q5'},
        'q2': {'a': 'q3', 'b': 'q4'},
        'q3': {'a': 'q2', 'b': 'q5'},
        'q4': {'a': 'q5', 'b': 'q5'},
        'q5': {'a': 'q5', 'b': 'q5'}
    },
    initial_state='q0',
    final_states={'q1', 'q4'}
)
for i in range(1,6):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:


DFA which accepts single 'a' or (aa)* ending with 'b' :
Enter the string :ab
Rejected
Enter the string :a
Accepted






#5th
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0', 'q1', 'q2', 'q3'},
    input_symbols={'a', 'b'},
    transitions={
        'q0': {'a': 'q1', 'b': 'q3'},
        'q1': {'a': 'q3', 'b': 'q2'},
        'q2': {'a': 'q1', 'b': 'q3'},
        'q3': {'a': 'q3', 'b': 'q3'}
    },
    initial_state='q0',
    final_states={'q2'}
)
for i in range(1,6):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:
DFA which accepts repeated  ‘ab’ only :
Enter the string :ab
Accepted
Enter the string :bab
Rejected




#6.1
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0', 'q1'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': 'q0', '1': 'q0'},
        'q1': {'0': 'q1', '1': 'q1'}
    },
    initial_state='q0',
    final_states={'q1'}
)
for i in range(1,8):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")










OUTPUT:


DFA which accepts 1. { }  --  ( null set ) :
Enter the string :10
Rejected
Enter the string :10000
Rejected










#6.2
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0', 'q1'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': 'q1', '1': 'q1'},
        'q1': {'0': 'q1', '1': 'q1'}
    },
    initial_state='q0',
    final_states={'q0'}
)
for i in range(1,6):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:


DFA which accepts 2. { ε } -- Accepts only null character :
Enter the string : 
Rejected
Enter the string :
Accepted




















#6.3
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': 'q0', '1': 'q0'}
    },
    initial_state='q0',
    final_states={'q0'}
)
for i in range(1,8):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:


DFA which accepts 3. Σ * -- accepts all combinations of ‘1’ and ‘0’ including null string :
Enter the string :101010
Accepted
Enter the string :10001
Accepted






#6.4
from automata.fa.dfa import DFA
dfa = DFA(
    states={'q0', 'q1'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': 'q1', '1': 'q1'},
        'q1': {'0': 'q1', '1': 'q1'}
    },
    initial_state='q0',
    final_states={'q1'}
)
for i in range(1,8):
    num = input("Enter the string :")
    if(dfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:


DFA which accepts . Σ + -- accepts all combinations of ‘1’ and ‘0’ excluding null string :
Enter the string :101010
Accepted
Enter the string :10
Accepted








NFA


#1
from automata.fa.nfa import NFA
nfa = NFA(
    states={'q0', 'q1', 'q2'},
    input_symbols={'0', '1'},
    transitions={
        'q0': {'0': {'q1','q0'}, '1': {'q0'}},
        'q1': {'1': {'q2'}},
        'q2': {}
    },
    initial_state='q0',
    final_states={'q2'}
)
for i in range(1,4):
    num = input("Enter the string :")
    if(nfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")


OUTPUT:


NFA which accepts strings that ends with “01” only :
Enter the string :010101
Accepted
Enter the string :00010
Rejected
















#2
from automata.fa.nfa import NFA
nfa = NFA(
    states={'q0', 'q1', 'q2', 'q3', 'q4'},
    input_symbols={'a', 'b'},
    transitions={
        'q0': {'a': {'q1','q2'}},
        'q1': {'a': {'q2','q4'}, 'b': {'q4'}},
        'q2': {'a': {'q2'}, 'b': {'q3'}},
        'q3': {},
        'q4': {}
    },
    initial_state='q0',
    final_states={'q1','q3'}
)
for i in range(1,6):
    num = input("Enter the string :")
    if(nfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:


NFA for L(M)= a + aa*b + a*b :
Enter the string :aab
Accepted
Enter the string :bba
Rejected




#3
from automata.fa.nfa import NFA
nfa = NFA(
    states={'q0', 'q1', 'q2'},
    input_symbols={'a', 'b'},
    transitions={
        'q0': {'a': {'q1'}},
        'q1': {'b': {'q0', 'q2'}},
        'q2': {}
    },
    initial_state='q0',
    final_states={'q2'}
)
for i in range(1,8):
    num = input("Enter the string :")
    if(nfa.accepts_input(num)):
        print("Accepted")
    else:
        print("Rejected")




OUTPUT:


NFA for (ab)^n which has regular expression (ab)* :
Enter the string :ababab
Accepted
Enter the string :ab
Accepted




Process finished with exit code 0